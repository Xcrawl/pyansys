.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-read_binary_load_shaft_result.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_00-read_binary_load_shaft_result.py:


.. _ref_load_shaft_result:

Shaft Modal Analysis
~~~~~~~~~~~~~~~~~~~~

Visualize a shaft modal analysis


.. code-block:: default

    import pyansys

    # Download an example shaft modal analysis result file
    shaft = pyansys.download_shaft_modal()








Geometry is stored both as a dictionary...


.. code-block:: default

    print(shaft.geometry.keys())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    dict_keys(['nnum', 'nodes', 'etype', 'elem', 'enum', 'nsec', 'ekey', 'esys', 'e_rcon', 'mtype', 'Element Type', 'coord systems', 'components'])




...as a VTK object


.. code-block:: default

    print(shaft.grid)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    UnstructuredGrid (0x7f2d10cc8c90)
      N Cells:      25051
      N Points:     27132
      X Bounds:     0.000e+00, 2.700e+02
      Y Bounds:     -4.000e+01, 4.000e+01
      Z Bounds:     -4.000e+01, 4.000e+01
      N Arrays:     24





Plot the shaft


.. code-block:: default

    shaft.plot()

    # list shaft node components



.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_001.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(461.5153157248284, 326.5153157248283, 326.5153157248283),
     (135.00000000000003, 0.0, 0.0),
     (0.0, 0.0, 1.0)]




.. code-block:: default

    print(shaft.node_components.keys())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    dict_keys(['ALL_CENTER_VOLUMES', 'BC1', 'BC2', 'CENTER_FREE_MESH', 'COMPLETE_CENTER_MESH', 'COMPLETE_REVOLVE_MESH', 'EBC1', 'EBC2', 'MAPPED_CENTER_MESH', 'MAPPED_REVOLVE_MESH', 'N_AREA_BC1', 'N_AREA_BC2', 'N_BC1', 'N_BC2', 'REVOLVE_SURFACES', 'ROTOR_REVOLVE_SURF1', 'ROTOR_SET1', 'SHAFT_MESH'])




Plot a node component


.. code-block:: default

    cpos = [(-115.35773008378118, 285.36602704380107, -393.9029392590675),
            (126.12852038381345, 0.2179228023931401, 5.236408799851887),
            (0.37246222812978824, 0.8468424028124546, 0.37964435122285495)]
    shaft.plot(node_components=['SHAFT_MESH'], cpos=cpos)
    # get cpos from cpos = shaft.plot()





.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_002.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(-115.35773008378118, 285.36602704380107, -393.9029392590675),
     (126.12852038381345, 0.2179228023931401, 5.236408799851887),
     (0.3724622281297882, 0.8468424028124544, 0.37964435122285484)]



Plot a node component as a wireframe


.. code-block:: default

    shaft.plot(node_components=['SHAFT_MESH'], cpos=cpos, style='wireframe',
               lighting=False)





.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_003.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(-115.35773008378118, 285.36602704380107, -393.9029392590675),
     (126.12852038381345, 0.2179228023931401, 5.236408799851887),
     (0.3724622281297882, 0.8468424028124544, 0.37964435122285484)]



Plot the shaft with edges and with a blue color


.. code-block:: default

    shaft.plot(show_edges=True, color='cyan')




.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_004.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(461.5153157248284, 326.5153157248283, 326.5153157248283),
     (135.00000000000003, 0.0, 0.0),
     (0.0, 0.0, 1.0)]



Plot the shaft without lighting but with edges and with a blue color


.. code-block:: default

    shaft.plot(lighting=False, show_edges=True, color='cyan')





.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_005.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(461.5153157248284, 326.5153157248283, 326.5153157248283),
     (135.00000000000003, 0.0, 0.0),
     (0.0, 0.0, 1.0)]



plot a mode shape without contours


.. code-block:: default

    shaft.plot_nodal_solution(1, node_components=['SHAFT_MESH'],
                              show_displacement=True, max_disp=10, overlay_wireframe=True,
                              cpos=cpos)




.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_006.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(-115.35773008378118, 285.36602704380107, -393.9029392590675),
     (126.12852038381345, 0.2179228023931401, 5.236408799851887),
     (0.3724622281297882, 0.8468424028124544, 0.37964435122285484)]



plot a mode shape with contours


.. code-block:: default

    shaft.plot_nodal_solution(1, node_components=['SHAFT_MESH'], n_colors=10,
                              show_displacement=True, max_disp=10, overlay_wireframe=True,
                              cpos=cpos)




.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_007.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(-115.35773008378118, 285.36602704380107, -393.9029392590675),
     (126.12852038381345, 0.2179228023931401, 5.236408799851887),
     (0.3724622281297882, 0.8468424028124544, 0.37964435122285484)]



Animate a mode of a component the shaft


.. code-block:: default

    shaft.animate_nodal_solution(5, node_components='SHAFT_MESH', comp='norm',
                                 max_disp=10, show_edges=True, cmap='bwr', cpos=cpos,
                                 loop=False)
    # set loop to True to plot continiously



.. image:: /examples/00-read_binary/images/sphx_glr_load_shaft_result_008.png
    :alt: load shaft result
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(-115.35773008378118, 285.36602704380107, -393.9029392590675), (126.12852038381345, 0.2179228023931401, 5.236408799851887), (0.37246222812978824, 0.8468424028124546, 0.37964435122285495)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.601 seconds)


.. _sphx_glr_download_examples_00-read_binary_load_shaft_result.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: load_shaft_result.py <load_shaft_result.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: load_shaft_result.ipynb <load_shaft_result.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
